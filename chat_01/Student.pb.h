// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Student.proto

#ifndef PROTOBUF_Student_2eproto__INCLUDED
#define PROTOBUF_Student_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Student_2eproto();
void protobuf_AssignDesc_Student_2eproto();
void protobuf_ShutdownFile_Student_2eproto();

class Student;

// ===================================================================

class Student : public ::google::protobuf::Message {
 public:
  Student();
  virtual ~Student();

  Student(const Student& from);

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Student& default_instance();

  void Swap(Student* other);

  // implements Message ----------------------------------------------

  Student* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Student& from);
  void MergeFrom(const Student& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string gender = 3;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 3;
  inline const ::std::string& gender() const;
  inline void set_gender(const ::std::string& value);
  inline void set_gender(const char* value);
  inline void set_gender(const char* value, size_t size);
  inline ::std::string* mutable_gender();
  inline ::std::string* release_gender();
  inline void set_allocated_gender(::std::string* gender);

  // required int32 age = 4;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 4;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);

  // required string object = 5;
  inline bool has_object() const;
  inline void clear_object();
  static const int kObjectFieldNumber = 5;
  inline const ::std::string& object() const;
  inline void set_object(const ::std::string& value);
  inline void set_object(const char* value);
  inline void set_object(const char* value, size_t size);
  inline ::std::string* mutable_object();
  inline ::std::string* release_object();
  inline void set_allocated_object(::std::string* object);

  // required string home_address = 6;
  inline bool has_home_address() const;
  inline void clear_home_address();
  static const int kHomeAddressFieldNumber = 6;
  inline const ::std::string& home_address() const;
  inline void set_home_address(const ::std::string& value);
  inline void set_home_address(const char* value);
  inline void set_home_address(const char* value, size_t size);
  inline ::std::string* mutable_home_address();
  inline ::std::string* release_home_address();
  inline void set_allocated_home_address(::std::string* home_address);

  // required string phone = 7;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 7;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // @@protoc_insertion_point(class_scope:Student)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_object();
  inline void clear_has_object();
  inline void set_has_home_address();
  inline void clear_has_home_address();
  inline void set_has_phone();
  inline void clear_has_phone();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* name_;
  ::std::string* gender_;
  ::std::string* object_;
  ::std::string* home_address_;
  ::std::string* phone_;
  ::google::protobuf::int32 age_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Student_2eproto();
  friend void protobuf_AssignDesc_Student_2eproto();
  friend void protobuf_ShutdownFile_Student_2eproto();

  void InitAsDefaultInstance();
  static Student* default_instance_;
};
// ===================================================================


// ===================================================================

// Student

// required string id = 1;
inline bool Student::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Student::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Student::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Student::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Student::id() const {
  return *id_;
}
inline void Student::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Student::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Student::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Student::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Student::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Student::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 2;
inline bool Student::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Student::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Student::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Student::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Student::name() const {
  return *name_;
}
inline void Student::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Student::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Student::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Student::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Student::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Student::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string gender = 3;
inline bool Student::has_gender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Student::set_has_gender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Student::clear_has_gender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Student::clear_gender() {
  if (gender_ != &::google::protobuf::internal::kEmptyString) {
    gender_->clear();
  }
  clear_has_gender();
}
inline const ::std::string& Student::gender() const {
  return *gender_;
}
inline void Student::set_gender(const ::std::string& value) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  gender_->assign(value);
}
inline void Student::set_gender(const char* value) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  gender_->assign(value);
}
inline void Student::set_gender(const char* value, size_t size) {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  gender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Student::mutable_gender() {
  set_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    gender_ = new ::std::string;
  }
  return gender_;
}
inline ::std::string* Student::release_gender() {
  clear_has_gender();
  if (gender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gender_;
    gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Student::set_allocated_gender(::std::string* gender) {
  if (gender_ != &::google::protobuf::internal::kEmptyString) {
    delete gender_;
  }
  if (gender) {
    set_has_gender();
    gender_ = gender;
  } else {
    clear_has_gender();
    gender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 age = 4;
inline bool Student::has_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Student::set_has_age() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Student::clear_has_age() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Student::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 Student::age() const {
  return age_;
}
inline void Student::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
}

// required string object = 5;
inline bool Student::has_object() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Student::set_has_object() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Student::clear_has_object() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Student::clear_object() {
  if (object_ != &::google::protobuf::internal::kEmptyString) {
    object_->clear();
  }
  clear_has_object();
}
inline const ::std::string& Student::object() const {
  return *object_;
}
inline void Student::set_object(const ::std::string& value) {
  set_has_object();
  if (object_ == &::google::protobuf::internal::kEmptyString) {
    object_ = new ::std::string;
  }
  object_->assign(value);
}
inline void Student::set_object(const char* value) {
  set_has_object();
  if (object_ == &::google::protobuf::internal::kEmptyString) {
    object_ = new ::std::string;
  }
  object_->assign(value);
}
inline void Student::set_object(const char* value, size_t size) {
  set_has_object();
  if (object_ == &::google::protobuf::internal::kEmptyString) {
    object_ = new ::std::string;
  }
  object_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Student::mutable_object() {
  set_has_object();
  if (object_ == &::google::protobuf::internal::kEmptyString) {
    object_ = new ::std::string;
  }
  return object_;
}
inline ::std::string* Student::release_object() {
  clear_has_object();
  if (object_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = object_;
    object_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Student::set_allocated_object(::std::string* object) {
  if (object_ != &::google::protobuf::internal::kEmptyString) {
    delete object_;
  }
  if (object) {
    set_has_object();
    object_ = object;
  } else {
    clear_has_object();
    object_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string home_address = 6;
inline bool Student::has_home_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Student::set_has_home_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Student::clear_has_home_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Student::clear_home_address() {
  if (home_address_ != &::google::protobuf::internal::kEmptyString) {
    home_address_->clear();
  }
  clear_has_home_address();
}
inline const ::std::string& Student::home_address() const {
  return *home_address_;
}
inline void Student::set_home_address(const ::std::string& value) {
  set_has_home_address();
  if (home_address_ == &::google::protobuf::internal::kEmptyString) {
    home_address_ = new ::std::string;
  }
  home_address_->assign(value);
}
inline void Student::set_home_address(const char* value) {
  set_has_home_address();
  if (home_address_ == &::google::protobuf::internal::kEmptyString) {
    home_address_ = new ::std::string;
  }
  home_address_->assign(value);
}
inline void Student::set_home_address(const char* value, size_t size) {
  set_has_home_address();
  if (home_address_ == &::google::protobuf::internal::kEmptyString) {
    home_address_ = new ::std::string;
  }
  home_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Student::mutable_home_address() {
  set_has_home_address();
  if (home_address_ == &::google::protobuf::internal::kEmptyString) {
    home_address_ = new ::std::string;
  }
  return home_address_;
}
inline ::std::string* Student::release_home_address() {
  clear_has_home_address();
  if (home_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = home_address_;
    home_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Student::set_allocated_home_address(::std::string* home_address) {
  if (home_address_ != &::google::protobuf::internal::kEmptyString) {
    delete home_address_;
  }
  if (home_address) {
    set_has_home_address();
    home_address_ = home_address;
  } else {
    clear_has_home_address();
    home_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string phone = 7;
inline bool Student::has_phone() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Student::set_has_phone() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Student::clear_has_phone() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Student::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& Student::phone() const {
  return *phone_;
}
inline void Student::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void Student::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void Student::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Student::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* Student::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Student::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Student_2eproto__INCLUDED
